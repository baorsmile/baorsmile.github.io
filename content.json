[{"title":"逆向工程_状态寄存器","date":"2018-07-09T14:11:02.000Z","path":"2018/07/09/逆向工程-状态寄存器/","text":"状态寄存器以及循环&amp;选择介绍 #状态寄存器&emsp;&emsp;&ensp;CPU内部的寄存器中,有一种特殊的寄存器(对于不同的处理器,个数和结构都可能不同).这种寄存器在ARM中,被称为状态寄存器就是CPSR(current program status register)寄存器CPSR和其他寄存器不一样,其他寄存器是用来存放数据的,都是整个寄存器具有一个含义.而CPSR寄存器是按位起作用的,也就是说,它的每一位都有专门的含义,记录特定的信息. 注:CPSR寄存器是32位的 CPSR的低8位（包括I、F、T和M[4：0]）称为控制位，程序无法修改,除非CPU运行于特权模式下,程序才能修改控制位! N、Z、C、V均为条件码标志位。它们的内容可被算术或逻辑运算的结果所改变，并且可以决定某条指令是否被执行!意义重大! ###N（Negative）标志 CPSR的第31位是 N，符号标志位。它记录相关指令执行后,其结果是否为负.如果为负 N = 1,如果是非负数 N = 0. &emsp;&emsp;&ensp;注意,在ARM64的指令集中,有的指令的执行时影响状态寄存器的,比如add\\sub\\or等,他们大都是运算指令(进行逻辑或算数运算)； ###Z(Zero)标志 CPSR的第30位是Z，0标志位。它记录相关指令执行后,其结果是否为0.如果结果为0.那么Z = 1.如果结果不为0,那么Z = 0. &emsp;&emsp;&ensp;对于Z的值,我们可以这样来看,Z标记相关指令的计算结果是否为0,如果为0,则N要记录下”是0”这样的肯定信息.在计算机中1表示逻辑真,表示肯定.所以当结果为0的时候Z = 1,表示”结果是0”.如果结果不为0,则Z要记录下”不是0”这样的否定信息.在计算机中0表示逻辑假,表示否定,所以当结果不为0的时候Z = 0,表示”结果不为0”。 ###C(Carry)标志 CPSR的第29位是C，进位标志位。一般情况下,进行无符号数的运算。加法运算：当运算结果产生了进位时（无符号数溢出），C=1，否则C=0。减法运算（包括CMP）：当运算时产生了借位时（无符号数溢出），C=0，否则C=1。 &emsp;&emsp;&ensp;对于位数为N的无符号数来说，其对应的二进制信息的最高位，即第N - 1位，就是它的最高有效位，而假想存在的第N位，就是相对于最高有效位的更高位。如下图所示： ###进位&emsp;&emsp;&ensp;我们知道，当两个数据相加的时候，有可能产生从最高有效位向更高位的进位。比如两个32位数据：0xaaaaaaaa + 0xaaaaaaaa,将产生进位。由于这个进位值在32位中无法保存，我们就只是简单的说这个进位值丢失了。其实CPU在运算的时候，并不丢弃这个进位制，而是记录在一个特殊的寄存器的某一位上。ARM下就用C位来记录这个进位值。比如，下面的指令 12345mov w0,#0xaaaaaaaa；0xa 的二进制是 1010adds w0,w0,w0； 执行后 相当于 1010 &lt;&lt; 1 进位1（无符号溢出） 所以C标记 为 1adds w0,w0,w0； 执行后 相当于 0101 &lt;&lt; 1 进位0（无符号没溢出） 所以C标记 为 0adds w0,w0,w0； 重复上面操作adds w0,w0,w0 ###借位&emsp;&emsp;&ensp;当两个数据做减法的时候，有可能向更高位借位。再比如，两个32位数据：0x00000000 - 0x000000ff,将产生借位，借位后，相当于计算0x100000000 - 0x000000ff。得到0xffffff01 这个值。由于借了一位，所以C位 用来标记借位。C = 0.比如下面指令： 1234mov w0,#0x0subs w0,w0,#0xff ;subs w0,w0,#0xffsubs w0,w0,#0xff ###V(Overflow)溢出标志 CPSR的第28位是V，溢出标志位。在进行有符号数运算的时候，如果超过了机器所能标识的范围，称为溢出。 正数 + 正数 为负数 溢出 负数 + 负数 为正数 溢出 正数 + 负数 不可能溢出 #循环&amp;选择 ##cmp（Compare）比较指令&emsp;&emsp;&ensp;CMP 把一个寄存器的内容和另一个寄存器的内容或立即数进行比较。但不存储结果，只是正确的更改标志。&emsp;&emsp;&ensp;一般CMP做完判断后会进行跳转，后面通常会跟上B指令！ BL 标号：跳转到标号处执行 B.GT 标号：比较结果是大于（greater than），执行标号，否则不跳转 B.GE 标号：比较结果是大于等于（greater than or equal to），执行标号，否则不跳转 B.EQ 标号：比较结果是等于，执行标号，否则不跳转 B.HI 标号：比较结果是无符号大于，执行标号，否则不跳转 ##Switch1、假设switch语句的分支比较少的时候（例如3，少于4的时候没有意义）没有必要使用此结构，相当于if。2、各个分支常量的差值较大的时候，编译器会在效率还是内存进行取舍，这个时候编译器还是会编译成类似于if，else的结构。3、在分支比较多的时候：在编译的时候会生成一个表（跳转表每个地址四个字节）。","tags":[{"name":"逆向","slug":"逆向","permalink":"http://www.tiandabao.com/tags/逆向/"}]},{"title":"逆向工程_函数本质","date":"2018-07-09T14:10:47.000Z","path":"2018/07/09/逆向工程-函数本质/","text":"查看函数本质 函数本质##关于CPU的补充 ####寄存器CPU除了有控制器、运算器还有寄存器。其中寄存器的作用就是进行数据的临时存储。 CPU的运算速度是非常快的，为了性能CPU在内部开辟一小块临时存储区域，并在进行运算时先将数据从内存复制到这一小块临时存储区域中，运算时就在这一小快临时存储区域内进行。我们称这一小块临时存储区域为寄存器。 对于arm64系的CPU来说， 如果寄存器以x开头则表明的是一个64位的寄存器，如果以w开头则表明是一个32位的寄存器，在系统中没有提供16位和8位的寄存器供访问和使用。其中32位的寄存器是64位寄存器的低32位部分并不是独立存在的。 ####高速缓存iPhoneX上搭载的ARM处理器A11它的1级缓存的容量是64KB，2级缓存的容量8M. CPU每执行一条指令前都需要从内存中将指令读取到CPU内并执行。而寄存器的运行速度相比内存读写要快很多,为了性能,CPU还集成了一个高速缓存存储区域.当程序在运行时，先将要执行的指令代码以及数据复制到高速缓存中去(由操作系统完成).CPU直接从高速缓存依次读取指令来执行. ###寄存器的补充 ####数据地址寄存器数据地址寄存器通常用来做数据计算的临时存储、做累加、计数、地址保存等功能。定义这些寄存器的作用主要是用于在CPU指令中保存操作数，在CPU中当做一些常规变量来使用。ARM64中 64位: X0-X30, XZR(零寄存器) 32位: W0-W30, WZR(零寄存器) 注意:之前讲解8086汇编中有一种特殊的寄存器段寄存器:CS,DS,SS,ES四个寄存器来保存这些段的基地址,这个属于Intel架构CPU中.在ARM中并没有 ####浮点和向量寄存器因为浮点数的存储以及其运算的特殊性,CPU中专门提供浮点数寄存器来处理浮点数 浮点寄存器 64位: D0 - D31 32位: S0 - S31 现在的CPU支持向量运算.(向量运算在图形处理相关的领域用得非常的多)为了支持向量计算系统了也提供了众多的向量寄存器. 向量寄存器 128位:V0-V31 栈 栈：是一种具有特殊的访问方式的存储空间（后进先出， Last In Out Firt，LIFO） ###SP和FP寄存器 sp寄存器在任意时刻会保存我们栈顶的地址. fp寄存器也称为x29寄存器属于通用寄存器,但是在某些时刻我们利用它保存栈底的地址!() 注意:ARM64开始,取消32位的 LDM,STM,PUSH,POP指令! 取而代之的是ldr\\ldp str\\stpARM64里面 对栈的操作是16字节对齐的!! ###关于内存读写指令 注意:读/写 数据是都是往高地址读/写 str(store register)指令 将数据从寄存器中读出来,存到内存中. ldr(load register)指令 将数据从内存中读出来,存到寄存器中 此ldr 和 str 的变种ldp 和 stp 还可以操作2个寄存器. ###堆栈操作练习使用32个字节空间作为这段程序的栈空间,然后利用栈将x0和x1的值进行交换. 123sub sp, sp, #0x20 ;拉伸栈空间32个字节stp x0, x1, [sp, #0x10] ;sp往上加16个字节,存放x0 和 x1ldp x1, x0, [sp, #0x10] ;将sp偏移16个字节的值取出来,放入x1 和 x0 bl和ret指令####bl标号 将下一条指令的地址放入lr(x30)寄存器 转到标号处执行指令 ####ret 默认使用lr(x30)寄存器的值,通过底层指令提示CPU此处作为下条指令地址! ARM64平台的特色指令,它面向硬件做了优化处理的 ####x30寄存器x30寄存器存放的是函数的返回地址.当ret指令执行时刻,会寻找x30寄存器保存的地址值! 注意:在函数嵌套调用的时候.需要讲x30入栈! ##函数的参数和返回值ARM64下,函数的参数是存放在X0到X7(W0到W7)这8个寄存器里面的.如果超过8个参数,就会入栈.函数的返回值是放在X0 寄存器里面的. ##函数的局部变量函数的局部变量放在栈里面!","tags":[{"name":"逆向","slug":"逆向","permalink":"http://www.tiandabao.com/tags/逆向/"}]},{"title":"逆向工程_汇编","date":"2018-04-19T03:07:09.000Z","path":"2018/04/19/逆向工程-汇编/","text":"寄存器介绍 初识汇编我们在学习逆向开发之前,我们要了解一个基本的逆向原理.首先我们是逆向iOS系统上面的APP.那么我们知道,一个APP安装在手机上面的可执行文件本质上是二进制文件.因为iPhone手机本质上执行的指令是二进制.是由手机上的CPU执行的.所以逆向开发是建立在分析二进制上面。 汇编语言的发展机器语言 由0和1组成的机器指令. 加：0100 0000 减：0100 1000 乘：1111 0111 1110 0000 除：1111 0111 1111 0000 汇编语言(assembly language) 使用助记符代替机器语言如: 加：INC EAX 通过编译器 0100 0000 减：DEC EAX 通过编译器 0100 1000 乘：MUL EAX 通过编译器 1111 0111 1110 0000 除：DIV EAX 通过编译器 1111 0111 1111 0000 ###高级语言（High-level programming language) C\\C++\\Java\\OC\\Swift,更加接近人类的自然语言比如C语言: 加：A+B 通过编译器 0100 0000 减：A-B 通过编译器 0100 1000 乘：A*B 通过编译器 1111 0111 1110 0000 除：A/B 通过编译器 1111 0111 1111 0000 我们的代码在终端设备上是这样的过程: 汇编语言与机器语言一一对应，每一条机器指令都有与之对应的汇编指令 汇编语言可以通过编译得到机器语言，机器语言可以通过反汇编得到汇编语言 高级语言可以通过编译得到汇编语言 \\ 机器语言，但汇编语言\\机器语言几乎不可能还原成高级语言 汇编语言的特点 可以直接访问、控制各种硬件设备，比如存储器、CPU等，能最大限度地发挥硬件的功能 能够不受编译器的限制，对生成的二进制代码进行完全的控制 目标代码简短，占用内存少，执行速度快 汇编指令是机器指令的助记符,同机器指令一一对应。每一种CPU都有自己的机器指令集\\汇编指令集，所以汇编语言不具备可移植性 知识点过多，开发者需要对CPU等硬件结构有所了解，不易于编写、调试、维护 不区分大小写，比如mov和MOV是一样的 汇编的用途(哥么我学了能干啥?) 编写驱动程序、操作系统（比如Linux内核的某些关键部分） 对性能要求极高的程序或者代码片段，可与高级语言混合使用（内联汇编） 软件安全 病毒分析与防治 逆向\\加壳\\脱壳\\破解\\外挂\\免杀\\加密解密\\漏洞\\黑客 理解整个计算机系统的最佳起点和最有效途径 为编写高效代码打下基础 弄清代码的本质 函数的本质究竟是什么? ++a + ++a + ++a 底层如何执行的? 编译器到底帮我们干了什么? DEBUG模式和RELEASE模式有什么关键的地方被我们忽略 …… 最后来句装13的话 越底层越单纯!真正的程序员都需要了解的一门非常重要的语言,汇编! 汇编语言的种类 目前讨论比较多的汇编语言有 8086汇编（8086处理器是16bit的CPU） Win32汇编 Win64汇编 ARM汇编（嵌入式、Mac、iOS） …… 我们iPhone里面用到的是ARM汇编,但是不同的设备也有差异.因CPU的架构不同. 架构 设备 armv6 iPhone, iPhone2, iPhone3G, 第一代、第二代 iPod Touch armv7 iPhone3GS, iPhone4, iPhone4S,iPad, iPad2, iPad3(The New iPad), iPad mini, iPod Touch 3G, iPod Touch4 armv7s iPhone5, iPhone5C, iPad4(iPad with Retina Display) arm64 iPhone5S 以后 iPhoneX , iPad Air, iPad mini2以后 几个必要的常识 要想学好汇编,首先需要了解CPU等硬件结构 APP/程序的执行过程 硬件相关最为重要是CPU/内存 在汇编中,大部分指令都是和CPU与内存相关的 总线 每一个CPU芯片都有许多管脚，这些管脚和总线相连，CPU通过总线跟外部器件进行交互 总线：一根根导线的集合 总线的分类 地址总线 数据总线 控制总线 举个例子 地址总线 它的宽度决定了CPU的寻址能力 8086的地址总线宽度是20，所以寻址能力是1M（ 2^20 ） 数据总线 它的宽度决定了CPU的单次数据传送量，也就是数据传送速度 8086的数据总线宽度是16，所以单次最大传递2个字节的数据 控制总线 它的宽度决定了CPU对其他器件的控制能力、能有多少种控制 内存 内存地址空间的大小受CPU地址总线宽度的限制。8086的地址总线宽度为20，可以定位2^20个不同的内存单元（内存地址范围0x00000~0xFFFFF），所以8086的内存空间大小为1MB 0x00000~0x9FFFF：主存储器。可读可写 0xA0000~0xBFFFF：向显存中写入数据，这些数据会被显卡输出到显示器。可读可写 0xC0000~0xFFFFF：存储各种硬件\\系统信息。只读 ##进制学习进制的障碍 很多人学不好进制，原因是总以十进制为依托去考虑其他进制，需要运算的时候也总是先转换成十进制，这种学习方法是错误的.我们为什么一定要转换十进制呢？仅仅是因为我们对十进制最熟悉，所以才转换.每一种进制都是完美的,想学好进制首先要忘掉十进制，也要忘掉进制间的转换！ ###进制的定义 八进制由8个符号组成:0 1 2 3 4 5 6 7 逢八进一 十进制由10个符号组成:0 1 2 3 4 5 6 7 8 9逢十进一 N进制就是由N个符号组成:逢N进一 这样的目的何在?传统我们定义的十进制和自定义的十进制不一样.那么这10个符号如果我们不告诉别人这个符号表,别人是没办法拿到我们的具体数据的!用于加密! 十进制由十个符号组成,逢十进一,符号是可以自定义的!! ###进制的运算 #####八进制加法表123456789101112 0 1 2 3 4 5 6 710 11 12 13 14 15 16 1720 21 22 23 24 25 26 27...1+1 = 2 1+2 = 3 2+2 = 4 1+3 = 4 2+3 = 5 3+3 = 61+4 = 5 2+4 = 6 3+4 = 7 4+4 = 10 1+5 = 6 2+5 = 7 3+5 = 10 4+5 = 11 5+5 = 121+6 = 7 2+6 = 10 3+6 = 11 4+6 = 12 5+6 = 13 6+6 = 141+7 = 10 2+7 = 11 3+7 = 12 4+7 = 13 5+7 = 14 6+7 = 15 7+7 = 16 #####八进制乘法表123456780 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 20 21 22 23 24 25 26 27...1*1 = 1 1*2 = 2 2*2 = 4 1*3 = 3 2*3 = 6 3*3 = 111*4 = 4 2*4 = 10 3*4 = 14 4*4 = 201*5 = 5 2*5 = 12 3*5 = 17 4*5 = 24 5*5 = 311*6 = 6 2*6 = 14 3*6 = 22 4*6 = 30 5*6 = 36 6*6 = 441*7 = 7 2*7 = 16 3*7 = 25 4*7 = 34 5*7 = 43 6*7 = 52 7*7 = 61 #####实战四则运算123 277 236 276 234+ 333 - 54 * 54 / 4-------- -------- -------- -------- ###二进制的简写形式12345 二进制: 1 0 1 1 1 0 1 1 1 1 0 0三个二进制一组: 101 110 111 100 八进制: 5 6 7 4四个二进制一组: 1011 1011 1100 十六进制: b b c 二进制：从0 写到 11110000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111这种二进制使用起来太麻烦，改成更简单一点的符号：0 1 2 3 4 5 6 7 8 9 A B C D E F 这就是十六进制了 ###数据的宽度数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的制约，数据都是有长度限制的（我们称为数据宽度），超过最多宽度的数据会被丢弃。 1234567891011121314#import &lt;UIKit/UIKit.h&gt;#import \"AppDelegate.h\"int test()&#123; int cTemp = 0x1FFFFFFFF; return cTemp;&#125;int main(int argc, char * argv[]) &#123; printf(\"%x\\n\",test()); @autoreleasepool &#123; return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class])); &#125;&#125; ###计算机中常见的数据宽度 位(Bit): 1个位就是1个二进制位.0或者1 字节(Byte): 1个字节由8个Bit组成(8位).内存中的最小单元Byte. 字(Word): 1个字由2个字节组成(16位),这2个字节分别称为高字节和低字节. 双字(Doubleword): 1个双字由两个字组成(32位) 那么计算机存储数据它会分为有符号数和无符号数.那么关于这个看图就理解了! 12345无符号数,直接换算!有符号数:正数: 0 1 2 3 4 5 6 7负数: F E D B C A 9 8 -1 -2 -3 -4 -5 -6 -7 -8 ###自定义进制符号 123456789101112十进制: 0 1 2 3 4 5 6 7 8 9自定义: 2 9 1 7 6 5 4 8 3 A 92 99 91 97 96 95 94 98 93 9A 12 19 11 17 16 15 14 18 13 1A 72 79 71 77 76 75 74 78 73 7A 62 69 61 67 66 65 64 68 63 6A 52 59 51 57 56 55 54 58 53 5A 42 49 41 47 46 45 44 48 43 4A 82 89 81 87 86 85 84 88 83 8A 32 39 31 37 36 35 34 38 33 3A 922 那么刚才通过10进制运算可以转化10进制然后查表!但是如果是其他进制.我们就不能转换,要直接学会查表 现在有9进制数 9个符号分别是：2，9，1，7，6，5，4， 8，3 逢9进1 那么： 123 + 234 = __ 123456789101112十进制: 0 1 2 3 4 5 6 7 8 自定义: 2 9 1 7 6 5 4 8 3 92 99 91 97 96 95 94 98 93 12 19 11 17 16 15 14 18 13 72 79 71 77 76 75 74 78 73 62 69 61 67 66 65 64 68 63 52 59 51 57 56 55 54 58 53 42 49 41 47 46 45 44 48 43 82 89 81 87 86 85 84 88 83 32 39 31 37 36 35 34 38 33 922 寄存器内部部件之间由总线连接 对程序员来说，CPU中最主要部件是寄存器，可以通过改变寄存器的内容来实现对CPU的控制 不同的CPU，寄存器的个数、结构是不相同的 通用寄存器 ARM64拥有有31个64位的通用寄存器 x0 到 x30,这些寄存器通常用来存放一般性的数据，称为通用寄存器（有时也有特定用途） 那么w0 到 w28 这些是32位的. 因为64位CPU可以兼容32位.所以可以只使用64位寄存器的低32位. 比如 w0 就是 x0的低32位! 通常，CPU会先将内存中的数据存储到通用寄存器中，然后再对通用寄存器中的数据进行运算 假设内存中有块红色内存空间的值是3，现在想把它的值加1，并将结果存储到蓝色内存空间 CPU首先会将红色内存空间的值放到X0寄存器中：mov X0,红色内存空间 然后让X0寄存器与1相加：add X0,1 最后将值赋值给内存空间：mov 蓝色内存空间,X0 ###pc寄存器(program counter) 为指令指针寄存器，它指示了CPU当前要读取指令的地址 在内存或者磁盘上，指令和数据没有任何区别，都是二进制信息 CPU在工作的时候把有的信息看做指令，有的信息看做数据，为同样的信息赋予了不同的意义 比如 1110 0000 0000 0011 0000 1000 1010 1010 可以当做数据 0xE003008AA 也可以当做指令 mov x0, x8 CPU根据什么将内存中的信息看做指令？ CPU将pc指向的内存单元的内容看做指令 如果内存中的某段内容曾被CPU执行过，那么它所在的内存单元必然被pc指向过 bl指令 CPU从何处执行指令是由pc中的内容决定的，我们可以通过改变pc的内容来控制CPU执行目标指令 ARM64提供了一个mov指令（传送指令），可以用来修改大部分寄存器的值，比如 mov x0,#10、mov x1,#20 但是，mov指令不能用于设置pc的值，ARM64没有提供这样的功能 ARM64提供了另外的指令来修改PC的值，这些指令统称为转移指令，最简单的是bl指令 bl指令 – 练习现在有两段代码!假设程序先执行A,请写出指令执行顺序.最终寄存器x0的值是多少? 123456789101112_A: mov x0,#0xa0 mov x1,#0x00 add x1, x0, #0x14 mov x0,x1 bl _B mov x0,#0x0 ret_B: add x0, x0, #0x10 ret","tags":[{"name":"逆向","slug":"逆向","permalink":"http://www.tiandabao.com/tags/逆向/"}]},{"title":"逆向工程_环境配置","date":"2018-04-18T10:08:01.000Z","path":"2018/04/18/逆向工程-环境配置/","text":"工欲善其事必先利其器 工具 Cycript MonkeyDev PP助手 MachOView idapro ios-app-signer-master Cycript 从官网下载最新的 SDK，解压，然后把解压的文件夹复制到/opt/ 下 配置环境变量，让我们可以在任何地方使用这个 cycript 命令,三个地方，可任选其一，.profile、.bash_profie、.zshrc,不过我选择放在 .profile 里面，.bash_profie 和 .zshrc 文件里都分别添加了source ~/.profile，下面要配置了12export CYCRIPT=/opt/cycript_0.9.594export PATH=$PATH:$CYCRIPT 好了 我们可以在任何地方 cycript 了 注意：当在终端运行 cycript 时会出现下面的错误123dyld: Library not loaded: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib Referenced from: /Users/devzkn/Downloads/cycript_0.9.594/Cycript.lib/cycript-apl Reason: image not found 相当棘手的问题，这说明你的 ruby 版本太高，不知道为啥 crycript 不更新最新的 ruby 呢？？？先不管了，先说解决办法： 1.设置 SIP 查询 SIP 状态12csrutil statusSystem Integrity Protection status: enabled. 以上说明你开启 SIP 功能了 关闭SIP重启电脑按住 command+r 进入Recovery模式，打开终端，输入 csrutil disable 关闭SIP，重启电脑2.复制自己的ruby 版本12sudo mkdir -p /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/sudo ln -s /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/libruby.2.3.0.dylib /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib 其中版本要看自己本地的，我自己的是2.3 /System/Library/Frameworks/Ruby.framework/Versions/ 这个下面是多少就填些多少就行了 MonkeyDev这里 MonkeyDev 是由网易一位安防的大牛开发的，自动集成class-dump、restore-symbol、Reveal、Cycript和注入的动态库并重签名安装到非越狱机器。安装过程全在 wiki 里面，由于是中文，讲的比较详细，安装即可 PP助手 for mac用于下载越狱软件，在 应用游戏 -&gt; 越狱应用，点击搜索，比如 微信 ，如果你手机连接了电脑，记得要拔了手机，才能显示下载！","tags":[{"name":"逆向","slug":"逆向","permalink":"http://www.tiandabao.com/tags/逆向/"}]},{"title":"2018年的开始","date":"2018-02-07T06:26:05.000Z","path":"2018/02/07/2018年的开始/","text":"密码!!!!你懂的! ","tags":[{"name":"Sentiment","slug":"Sentiment","permalink":"http://www.tiandabao.com/tags/Sentiment/"}]},{"title":"Ruby","date":"2018-01-05T09:27:44.000Z","path":"2018/01/05/Ruby/","text":"Ruby ： Ruby one more thing RubyGem11bundler gem dabao 21rake build","tags":[]},{"title":"记忆犹新的一次面试","date":"2017-09-04T08:45:05.000Z","path":"2017/09/04/记忆犹新的一次面试/","text":"面试就是想对象 2017年8月10号，从一个待了三年的公司离职了，说实话还真有些不舍，公司情况大家有目共睹，走也不好，不走也不好！面试的时候都会问你为啥要离开啊？说实话我只想找一个稳定的，让自己有个归属感的地方。可是这些真话没有哪个hr或者leader认可，其实这是每个人的初心，他们更喜欢被骗，说一些不切实际的幻想，人都喜欢好话而已。一些牢骚而已，下面是我面试遇到一些问题 block 问：MRC和ARC下一般声明block用什么 答：MRC用copy，因为初始化实在栈上；ARC声明也用copy 问：ARC用strong行吗？ 答：当然可以，ARC用strong系统会自动拷贝到堆上 NSString1234567891011NSString *str1 = @\"stringtest\";[str1 retain]; // str1引用计数是多少？-&gt; -1[str1 copy]; // str1引用计数是多少？-&gt; -1NSString *str2 = str1; // str2引用计数是多少？-&gt; -1 str1引用计数是多少？-&gt; -1NSString *str3 = [str1 copy]; // str3引用计数是多少？-&gt; -1 str1引用计数是多少？-&gt; -1NSString *str4 = [str1 mutableCopy]; // str4引用计数是多少? -&gt; 1 str1引用计数是多少? -&gt; -1 NSString有自己的存储空间，有点类似static，而且如果字符串相同，只会有一个内存地址 在iOS开发中我们存储分为 栈 堆 全局区(静态区) （static） 文字常量区 存放常量字符串，程序结束后由系统释放 程序代码区 存放函数的二进制代码 @synchronized () 这个后面到底接什么，接self，还是相应的属性，这个锁的原理是把括号里面的放到一个hash表里面，等取值或者赋值会取hash表里面的key值，如果有就等待，具体相应 如果是self相应的类多不能更改，如果是相应的属性，其他属性是不受影响的。 UIView animationdispatch_asyc原子就是说cpu要不就不做，要做就一定要做完某些操作才能干别的事情,对应这里就是比较和交换要一次过做完","tags":[{"name":"Sentiment","slug":"Sentiment","permalink":"http://www.tiandabao.com/tags/Sentiment/"}]},{"title":"Jenkins","date":"2017-09-01T02:49:04.000Z","path":"2017/09/01/Jenkins/","text":"Jenkins相关集成 安装brew install jenkins 到这一步都说安装成功了，但是我在Users/dabao/Shared/压根没找到jenkins目录，所以还是老老实实在官网下载Jenkins安装吧，你就会发现在shared下面已经有了jenkins的文件。 运行 当你安装完成后，就就自动开发浏览器，并且打开的是http://localhost:8080， 这里又有个坑，就是会出现下图的情况， 其实把如果用brew安装会有下图的key 但是我没看到，或者我用apk安装的，那我们可以去找到/Users/Shared/Jenkins/Home/secrets 这个目录下，不用想这个目录没有权限打开，那我们可以右键-&gt;显示简介-&gt;共享与权限。如下图的操作 开发initialAdminPassword，是的，你没有看错，就是打不开，还是权限问题，按照上面的做一遍，你就可以拿到key了，填到浏览器里面，就开始安装了，等着吧 剩下的其他blog多了去了，我想大部分初入Jenkins都遇到我说的这种情况","tags":[]},{"title":"Hexo Sum","date":"2017-07-22T14:34:35.000Z","path":"2017/07/22/Hexo-Sum/","text":"Hexo Sum ： Hexo主题，博文插入图片，添加评论，添加浏览数，加密博文 博文插入图片 修改_config.yml里面的post_asset_folder:true 在根目录下执行npm install hexo-asset-image --save安装插件 hexo n &quot;new&quot;生成一个新的博文，在source/_posts/new会生一个new文件夹,用来存放图片 ![你想输入的替代文字](new/xxx.jpg) 添加搜狐畅言评论 举例我用的主题是smackdown在themes/smackdown/layout/_partial/article.ejs里面最后添加如下代码 1234567891011121314151617181920&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;&lt;section id=\"comments\"&gt;&lt;!--高速版，加载速度快，使用前需测试页面的兼容性--&gt; &lt;div id=\"SOHUCS\" sid=\"&lt;%= page.title %&gt;\" style=\"padding: 0px 30px 0px 46px;\"&gt;&lt;/div&gt; &lt;script&gt; (function()&#123; var appid = '你的 AppID', conf = '你的 Appkey'; var doc = document, s = doc.createElement('script'), h = doc.getElementsByTagName('head')[0] || doc.head || doc.documentElement; s.type = 'text/javascript'; s.charset = 'utf-8'; s.src = 'http://assets.changyan.sohu.com/upload/changyan.js?conf='+ conf +'&amp;appid=' + appid; h.insertBefore(s,h.firstChild); window.SCS_NO_IFRAME = true; &#125;)() &lt;/script&gt;&lt;/section&gt;&lt;% &#125; %&gt; 畅言目前需要自己的域名网站备案才可以使用，具体的创建可以按照这篇博文实现Github pages + Hexo 博客 yilia 主题使用畅言评论系统 添加阅读量 可以参考为hexo-theme-smackdown主题添加阅读数 文章加密 可参考：hexo-blog-encrypt 这个插件目前只适合Next主题","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tiandabao.com/tags/Hexo/"}]},{"title":"实用技巧","date":"2017-07-17T09:30:31.000Z","path":"2017/07/17/知识总结/","text":"实用技巧 ： 主要是一些关于实用技巧 Git忽略文件 参考：这篇博文","tags":[]},{"title":"iOS关键知识点整理","date":"2017-07-17T02:32:44.000Z","path":"2017/07/17/iOS关键知识点整理/","text":"iOS关键知识点整理 ： 主要是关于iOS开发关键知识点整理 Coy/MutableCopy(深浅拷贝) 只有对不可变对象进行copy操作是指针复制（浅复制），其它情况都是内容复制（深复制）！ 这句话是说，只要是类似于NSArray/NSString这类不可变兑现的copy，都是指针复制，而对带有Mutable前缀的例如NSMutableArray这类的不管是copy还是MutableCopy都是深拷贝，要重新在内存开辟空间* obejct = nil 真的像你想像的一样吗整理copy时发现一个问题，比如：12345678910111213141516171819NSMutableArray *ones = [[NSMutableArray alloc] initWithObjects:@\"1\", nil];NSMutableArray *twos = ones;NSLog(@\"one: %@, twos: %@\", ones, twos);NSLog(@\"&amp;one:%x, &amp;tows:%x\", &amp;ones, &amp;twos);log(lldb) p &amp;ones(NSMutableArray **) $0 = 0x00007fff580809c8(lldb) p &amp;twos(NSMutableArray **) $1 = 0x00007fff580809c0(lldb) po ones&lt;__NSArrayM 0x60800004a590&gt;(1)(lldb) po twos&lt;__NSArrayM 0x60800004a590&gt;(1) 这里面的这个twos = ones是copy呢还是strong，strong真像我们所说的只是简单的赋值吗？看样子这种简单的不复制也会产生一个新的指针地址 我又做了一个例子来验证这一理论 1234567891011121314151617181920212223242526272829NextViewController *next = [[NextViewController alloc] init];UIView *view = [UIView new];NSLog(@\"view %@, &amp;view %x\", view, &amp;view);next.nameView = view;[self.navigationController pushViewController:next animated:YES];log(lldb) po view&lt;UIView: 0x7fb1afd07240; frame = (0 0; 0 0); layer = &lt;CALayer: 0x61800023a860&gt;&gt;(lldb) po &amp;view0x00007fff5d3f2608在NextViewCotroller.h@interface NextViewController : UIViewController@property (nonatomic, strong) UIView *nameView;@end在NextViewCotroller.viewDidLoad- (void)viewDidLoad &#123; [super viewDidLoad]; NSLog(@\"view %@, &amp;view %x\", _nameView, &amp;_nameView);&#125;log(lldb) po _nameView&lt;UIView: 0x7fb1afd07240; frame = (0 0; 0 0); layer = &lt;CALayer: 0x61800023a860&gt;&gt;(lldb) po &amp;_nameView0x00007fb1afd03bb8 对比前后两次赋值的指针的地址变了，但是所指向的内存地址没有变，这也说明strong不是简单的赋值 下来我们传一个数据进来试试12345678910111213141516171819202122232425262728293031NextViewController *next = [[NextViewController alloc] init];NSArray *ones = @[@\"name\"];NSLog(@\"ones %@, &amp;ones %x\", ones, &amp;ones);next.names = ones;[self.navigationController pushViewController:next animated:YES];log(lldb) po ones&lt;__NSSingleObjectArrayI 0x6180000100a0&gt;(name)(lldb) po &amp;ones0x00007fff5d7aa5f8在NextViewCotroller.h@interface NextViewController : UIViewController@property (nonatomic, strong) NSArray *names;@end在NextViewCotroller.viewDidLoad- (void)viewDidLoad &#123; [super viewDidLoad]; NSLog(@\"view %@, &amp;view %x\", _names, &amp;_names);&#125;log(lldb) po _names&lt;__NSSingleObjectArrayI 0x6180000100a0&gt;(name)(lldb) po &amp;_names0x00007fec1a510dd0 发现还是一样的， 下来我们把strong 改成copy试试会发生什么 12345678910111213(lldb) po ones&lt;__NSSingleObjectArrayI 0x618000019330&gt;(name)(lldb) po &amp;ones0x00007fff51e3d5f8(lldb) po _names&lt;__NSSingleObjectArrayI 0x618000019330&gt;(name)(lldb) po &amp;_names0x00007f92c710b958 最终发现也是一样的指针创建新的，指针指向的内存地址没变苹果的做法是：我即使把一个初始化的好的变量赋值给其他变量时，都进行了一次指针拷贝，也就是我们所谓的浅拷贝，这样防止，一个指针值成nil，这个指针原来指向的内存还有其他指针指向，这部分内存也不会马上被释放掉，保证了内存数据安全。copy在赋值上不同于strong，我们用的最多的就是给array copy，因为copy后的数组都是不可操作的，这样保证了我给一个对象传入的数据不被修改，如果想修改就出入一个NSMutable，并把属性改成strong，这样内外都可以修改。 对于内存的处理，有一次我是在用realm里面遇到过一个bug 当初是我把数据库里面的数据全部取出来，然后放到数组里面，然后把数据库里面这些数据删掉，然而我数组里的数据也变成了Invalid类型， 这不得不说realm关联的强大，realm应该是对从数据库取出来的数据进行了标记，当被释放掉后，我自己数组里面的存的其实就是一组野指针，没有任何指向。 UIScrollView或者其他Offset偏移量 位移转化成缩放比例 1234567// offset 位移偏量// scaleMargin 从小变大、从大变小偏量（不是比例） MAX(startSize, finalSize) - finalSize或者 MAX(startSize, finalSize) - startSize// finalSize 最终size// startSize 最大size MAX(startSize, finalSize)// actualOffset 实际真实运行大小CGFloat scale = (offset * (scaleMargin/actualOffset) + finalSize)/startSize; KVO坑 可以对同一个属性就行多次添加，在监听回掉里里面会接受到多个添加的kepath, 也就是说添加了几个回调几个；在rmove时候也是，添加了几个就remvoe几个，不管是否是同一个属性 如果你添加一个属性，但是你remove了两次，就会crash，这里强调一点，如果你对一个属性添加了多次，你就要remove多次，这是不会crash的 防止remove掉父类的你需要在add时候添加一个上下文context，来进行标记是否是自己添加，再在remove的时候remove掉自己的就行了 实现方式 当你观察一个对象时，一个新的类会动态被创建。这个类继承自该对象的原本的类，并重写了被观察属性的 setter 方法。自然，重写的 setter 方法会负责在调用原 setter 方法之前和之后，通知所有观察对象值的更改。最后把这个对象的 isa 指针 ( isa 指针告诉 Runtime 系统这个对象的类是什么 ) 指向这个新创建的子类，对象就神奇的变成了新创建的子类的实例。 GCGdispatch_apply，循环多少次应用场景 要处理大数据时候使用apply会比多开线程来的好 如果我们从服务器获取一个数组的数据，那么我们可以使用该方法从而快速的批量字典转模型。12345678910111213NSArray *dictArray = nil;//存放从服务器返回的字典数组 dispatch_queue_t queue = dispatch_queue_create(\"queue\", DISPATCH_QUEUE_CONCURRENT); dispatch_async(queue, ^&#123; dispatch_apply(dictArray.count, queue, ^(size_t index)&#123; //字典转模型 &#125;); dispatch_async(dispatch_get_main_queue(), ^&#123; NSLog(@\"主线程更新\"); &#125;); &#125;); 作者：lltree转自：http://www.jianshu.com/p/3b12bb90bb15 dispatch_barrier_async/dispatch_barrier_sync，屏障 DISPATCH_QUEUE_CONCURRENT 队列中才起作用,在全局并发队列 dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0) 中无效,也就是说起不到屏障的作用 放到子线程里面做dispatch_barrier_sync，发现不起作用，也不会打印block里面的内容，但是用dispatch_barrier_async是可以的 12345678910111213141516171819202122232425262728293031323334dispatch_queue_t concurrent_queue = dispatch_queue_create(\"concurrent_queue\", DISPATCH_QUEUE_CONCURRENT);dispatch_async(concurrent_queue, ^()&#123; NSLog(@\"task-1--%@\",[NSThread currentThread]);&#125;);dispatch_async(concurrent_queue, ^()&#123; NSLog(@\"task-2--%@\",[NSThread currentThread]);&#125;);dispatch_sync(concurrent_queue, ^()&#123; NSLog(@\"task-3--%@\",[NSThread currentThread]); dispatch_async(concurrent_queue, ^()&#123; NSLog(@\"task-5--%@\",[NSThread currentThread]); &#125;); dispatch_async(concurrent_queue, ^()&#123; NSLog(@\"task-6--%@\",[NSThread currentThread]); &#125;); dispatch_barrier_async(concurrent_queue, ^()&#123; NSLog(@\"dispatch_barrier_async--%@\",[NSThread currentThread]); &#125;); dispatch_async(concurrent_queue, ^()&#123; NSLog(@\"task-4--%@\",[NSThread currentThread]); &#125;);&#125;);2017-07-17 19:08:17.998 BackBlock[32724:28690837] task-3--&lt;NSThread: 0x618000066040&gt;&#123;number = 1, name = main&#125;2017-07-17 19:08:17.998 BackBlock[32724:28691040] task-2--&lt;NSThread: 0x61000006bbc0&gt;&#123;number = 4, name = (null)&#125;2017-07-17 19:08:17.998 BackBlock[32724:28691038] task-1--&lt;NSThread: 0x618000068980&gt;&#123;number = 3, name = (null)&#125;2017-07-17 19:08:17.999 BackBlock[32724:28691042] task-5--&lt;NSThread: 0x6180000690c0&gt;&#123;number = 5, name = (null)&#125;2017-07-17 19:08:17.999 BackBlock[32724:28691057] task-6--&lt;NSThread: 0x60800006c340&gt;&#123;number = 6, name = (null)&#125;2017-07-17 19:08:17.999 BackBlock[32724:28691057] dispatch_barrier_async--&lt;NSThread: 0x60800006c340&gt;&#123;number = 6, name = (null)&#125;2017-07-17 19:08:17.999 BackBlock[32724:28691057] task-4--&lt;NSThread: 0x60800006c340&gt;&#123;number = 6, name = (null)&#125; 关于NSArray取数据安全性整理大家都知道，如果取的index大于数组个数会产生crash，这时候我们需要判断 OC12345NSArray *array = @[@\"1\"];NSInteger number = 1;if (number &lt; array.count) &#123; NSLog(@\"here is real value\");&#125; 这个地方有一个问题就是如果 number = -1时候，是否&lt;array.count,答案是： 否，因为array.count是NSUInteger，比较的时候会转换成NSUInteger就行比较，-1是多少呢，其实变了一个很大的数 Swift12345let array = [AnyObject]()let number = -1if number &gt; 0 &amp;&amp; number &lt; array.count &#123; print(\"real data\")&#125; 在swift当中，就不会number和array.count 都是int类型，有正负之分，所以要添加一个判断，number是否小于零，换成NSArray也是一样，count都变成了int型","tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.tiandabao.com/tags/iOS/"}]},{"title":"Swift学习笔记","date":"2017-07-13T08:51:12.000Z","path":"2017/07/13/Swift学习笔记/","text":"Swift学习笔记 ： 主要是关于Swift学习笔记 [open/public]和[private/fileprivate]public1.使用public修饰的类,属性或方法,可以被任何类访问2.但在其他的module中不可以被override和继承,而在本module可以 module内和module外的区别 ： module内是指不需要使用import引用文件，就可以创建对象，表示module内，而module外是指需要使用import文件才能创建对象才能使用 这里有个很好的module例子，比如说你项目中用到了pods,你要继承里面一个类，这时候public和open就起到作用，但是如果你在工程里面，通俗的说就是基本上和open没有区别 open1.可以被任何人使用2.也可以被override和继承,这是和public的区别 private只在自己的类里面可以使用，在类外不能用，就是说,不管另外一个类是否在这个文件里，都不能访问，包括自己的extension里面 fileprivate顾名思义，只要在这个文件里面，所有的类、extension都可以访问，比如说类A和B都在同一个swift文件里面，A里面初始化B，调用B里面属性方法都可以 String格式化1，下面是一个浮点类型的数字转成String字符串的例子 12var f = 123.32342342var s:String = \"\\(f)\" //123.32342342 2，如果要保留两位小数12var f = 123.32342342var s = String(format: \"%.2f\", f) //123.32 3，转成十六进制格式字符串12let i = 255let s:String = String(format: \"%x\", i) //ff 4，不足六位前面补012let i = 255let s:String = String(format: \"%06x\", i) //0000ff Array和DictionaryArray 遍历 123456789let count: Int = 10for i in 0..&lt; count &#123; // 0 - 9&#125;for i in 0...count &#123; // 0 - 10&#125; Dictionary 遍历 12345678910111213let dict: Dictionary = [\"key\":\"value\"]for (key, value) in dict &#123;&#125;dict.forEach &#123; (key, value) in&#125;(dict as NSDictionary).enumerateKeysAndObjects(&#123; (key, value, stop) in&#125;) Keyboard12345678910111213141516171819202122232425func willShow(_ center: Notification) &#123; self.handleKeyboard(center)&#125;func willHide(_ center: Notification) &#123; self.handleKeyboard(center)&#125;func handleKeyboard(_ center: Notification) &#123; if let nInfo = (center as NSNotification).userInfo, let value = nInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue &#123; let frame = value.cgRectValue let duration: CGFloat = nInfo[UIKeyboardAnimationDurationUserInfoKey] as! CGFloat let keyboardMoveY: CGFloat = frame.origin.y - kMainScreen_Height() UIView.animate(withDuration: TimeInterval(duration), animations: &#123; self.transform = CGAffineTransform(translationX: 0, y: keyboardMoveY); &#125;) &#125;&#125; protocol 总结一句话：只要协议里面声明的函数，优先调用实现，没有声明按类型区分调用 如果类型推断得到的是实际的类型 那么类型中的实现将被调⽤；如果类型中没有实现的话，那么协议扩展中的默认实现将 被使⽤ 如果类型推断得到的是协议，⽽不是实际类型 并且⽅法在协议中进⾏了定义， 那么类型中的实现将被调⽤；如果类型中没有实现，那 么协议扩展中的默认实现被使⽤ 否则 (也就是⽅法没有在协议中定义)，扩展中的默认实现将被调⽤","tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.tiandabao.com/tags/iOS/"}]},{"title":"MyBaby","date":"2017-03-02T01:30:41.000Z","path":"2017/03/02/MyBaby/","text":"密码!!!!你懂的! ","tags":[]},{"title":"常用的iOS开发库","date":"2017-02-06T06:45:32.000Z","path":"2017/02/06/常用的iOS开发库/","text":"常用的iOS开发库 ： 一些自己发现的实用的第三方库 持续更新ing33 个 2017 年必须了解的 iOS 开源库缓存 EGOCache 滚动视图 CRPageViewController 支付 RMStore","tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.tiandabao.com/tags/iOS/"}]},{"title":"多个git账号的配置","date":"2017-01-23T03:17:08.000Z","path":"2017/01/23/多个git账号的配置/","text":"多个git账号的配置 ： 多个git帐号的处理，我们有时候需要配置很多git的ssh，那我们要如何实现呢？ 多个git账号的配置有时候我们需要在同一台Mac电脑下上使用多个git账号，为了避免冲突，我们需要配置~/.ssh/config文件，作为程序员会有多个代码管理的库，现在用SVN比较少了，Git成为主流，但是在电脑下如何同时保存多个ssh账号呢，自己总结了一下步骤：注意：整个修改过程按照github的ssh-key为范例 1、用ssh-keygen命令生成一组新的id_rsa_github和id_rsa_github.pub123cd ~/.sshssh-keygen -t rsa -C \"new email\" 当我们在终端输入完上面的命令，回车后会提示：1Enter file in which to save the key (/Users/dabao/.ssh/id_rsa): 现在就是生成一个新的pub，在: 后输入你想生成文件的新名字，例如github的：id_rsa_github,名字可以随便起，然后回车。1Enter passphrase (empty for no passphrase): 我感觉整个秘密可以不用输入，我一般就是github的密码，按回车，确认密码，然后就生成了新的key. 这个时候会发现，在~/.ssh文件夹下会多出一个id_rsa_github和id_rsa_github.pub的文件 2、打开config文件，如果没有就生成一个! 这里可以修改Host，Host只是一个标记而已，比如说我有两个github账号，这时候我就要生成不同的key，用Host起一个别名用来区分就好了 12345678910Host git-oschina HostName git.oschina.net User xxx(名字随便写) PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_oschinaHost git-github HostName github.com User xxx(名字随便写) PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_github 3、将SSH Key添加到ssh-agent，执行命令：1 eval $(ssh-agent -s) 返回agent的Pid： 4、然后我们要把ssh添加到git里面1ssh-add ~/.ssh/id_rsa_github 5、然后测试一下是否OK12ssh -T git@github.comHi xxx! You've successfully authenticated,but GitHub does not provide shell access. 6、完成之后需要设置config 在自己git项目下，终端运行 1git config --list 查看自己config配置，路径在~/.gitconfig里，可以用文本打开 这个地方强调一下 12git config --global user.name \"xxx\"git config --global user.email \"xxx@qq.com\" 这个如果你想全局都是这个你可以选择gloabal，反正我的~/.gitconfig里面是我公司的配置，可一个人选择配置 又或者在自己项目里进行单独配置 12git config user.name \"xxx\"git config user.email \"xxx@qq.com\" 这个设置会显示在你的提交信息里面，在自己项目的.git目录下，有个名为config的文件，如果找不到可以在终端输入l -list 7、如果遇到如图下面这种情况 就把known_hosts里面相应的地址删掉，在执行ssh -T重新请求就好了","tags":[{"name":"Git","slug":"Git","permalink":"http://www.tiandabao.com/tags/Git/"}]},{"title":"新年新的开端","date":"2017-01-22T03:37:14.000Z","path":"2017/01/22/新年新的开端/","text":"新年新的开端 ： 2017年开始了，新年新气象。加油！ 2016这一年，没有任何大的提升，后来转岗新项目，有了部分多余的时间，自己学习算法，把最底层的算法过一遍，二叉树，排序这些考的最多的；Ruby语言也按照系统的学习了一边，最基本的语法，实现一个博客的，都可以了，但是由于项目后期忙，基本上就放下了。这一年，书没看完三本，两个0.5，不管技术类型还是其他，基本上没看完；对于新语言ruby，只能说半知半解，感觉还差好多，几本播客是可以完成，但是内部结构原理，还是不是很清楚，想继续深入，原本是想用ruby写脚本的，但是思路和思想还是面向对象编程，对脚本语言不熟悉、了解。这一年，自己结了婚，有了宝宝，有了自己家庭，自己也越有责任感！2017这一年，新的一年，目标不大也不能小，要对自己负责，对家庭负责！ 读书，这个还得继续，读万卷书行万里路，就这一个道理，一本书，既然开始读了，就持之以恒的读完！ 新的专业知识，这个问题其实挺严峻的，随着开发的进行，各个新技术涌现，学的东西太多了，自己要抓住自己感兴趣的东西，去了解学习。 未来 新技术瞻望，新技术学习，持之以恒 对于iOS开发，Swift学习；对于其他语言Ruby持续深入","tags":[{"name":"Sentiment","slug":"Sentiment","permalink":"http://www.tiandabao.com/tags/Sentiment/"}]},{"title":"UITextView心得","date":"2016-07-02T15:26:43.000Z","path":"2016/07/02/UITextView心得/","text":"UITextView心得 ： 主要是关于UITextView一些测试和自己的一些见解，不喜勿喷哦！ UITextView最近开发输入框这个鬼东西，输入自动调整高度，网上也有各种添加placeholder的，感觉都不太好用，自己着手去搞一下，最近很困扰我一个问题，由于要添加placeholder有时候和光标对不齐，最后用reveal查看了一下，如下1234567891011121314// font = 0 h = 16 selectionh = 1.5// font = 0.5 h = 17 selectionh = 2.09668// font = 1 h = 18 selectionh = 2.69336 // (width = 6, height = 1.193359375)// font = 1.5 h = 18 selectionh = 3.29004// font = 2 h = 19 selectionh = 3.88672 2.386719// font = 3 h = 20 selectionh = 5.08008// font = 4 h = 21 selectionh = 6.27344// font = 5 h = 22 selectionh = 7.4668// font = 10 h = 28 selectionh = 13.4336 contentOffset = &#123; 0, 3 &#125; 25// font = 11 h = 30 selectionh = 14.627// font = 100 h = 136 selectionh = 120.836 contentOffset = &#123; 0, 110.5 &#125; 25.5// font = 1000 h = 1210 selectionh = 1194.86 contentOffset = &#123; 0, 1184.5 &#125; 25.5// font = 10000 h = 11950 selectionh = 11935.1 contentOffset = &#123; 0, 11924.5 &#125; 25.5// font = 100000 h = 119352 selectionh = 119337 contentOffset = &#123; 0, 119327 &#125; 25.5 这是测试的一些font，就想知道到底textView是怎么计算contenSize的，一直从光标高度算起，最终没算出来，但是搞定了光标的高度 min：1.5，光标height=text.size.height+1.5 光标的point = {4, 7}, 这是一开始没有文字输入的时候，如果设置placeholderLabel的坐标可以通过point来确定 实际上contentSize的高度是这样来的contentSizeHeight = round(text.size.height + 16)（四舍五入）这样能解释为什么当font=0时候，初始化高度为16了，其实和光标没有任何关系。","tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.tiandabao.com/tags/iOS/"}]},{"title":"幻想该怎样处理","date":"2016-02-29T03:08:34.000Z","path":"2016/02/29/幻想该怎样处理/","text":"幻想该怎样处理 ： 摘自一篇佛经，幻想人人都有，你呢??? 打坐时经常看到”幻想”该怎样处理 抄一篇小文，感觉挺有深意。 问：师父，我在打坐的时候经常会看到一些“幻像”，有时候会很害怕，不知道该怎么处理，希望师父给指点迷津，阿弥陀佛。 慧广法师：唯一的方法就是不执着。要知道，我们亲身经历的一切，都会慢慢地消失，慢慢被遗忘。何况是静坐中出现的幻觉？世界就是这样，你抓不住任何东西，所以，不要执著它。 大家想一想，你们此刻觉得我说的话真好，有些人会感动，有些人会出现一种感悟，但这些东西明天还在不在，后天还在不在，说不清。什么意思呢？任何情绪，任何心情，任何经历，都会很快过去，不要跟着它，不要执著它，不要想抓住它。痛苦、幸福、仇恨都一样，只有傻瓜才想抓住它，智者知道它只是水里的月亮。 什么是智者？就是明白我讲的这个真理，并且照着去做的人。 什么是愚者？就是不明白这个道理，总被一些事情和情绪所控的人。比如说，三天前女朋友说了一句话，你到现在都气得要死；五天前朋友说了一句话，你到现在也气得要死；一年前某人说了一句话，你到今天还气得要死。结果你就气死了，气不死也气病了。那么，你就是愚者。被一些失去的东西压得喘不过气的时候，你也是愚者。明白一切都会过去，抓紧时间做事，喝茶的喝茶，演讲的演讲，聊天的聊天，吃饭的吃饭，做而无做，无做而做，就是智者。 愚智之间，只有一线之差，执著就是愚，放下就是智。就这么简单，不要老是被过去的，或者不可能抓住的东西，把你的生命捆死，你要是真把它当成“幻像”的话，就不会有疑惑了。 本文来源：网易佛学 作者：中国佛经网","tags":[{"name":"Sentiment","slug":"Sentiment","permalink":"http://www.tiandabao.com/tags/Sentiment/"}]},{"title":"2016年计划","date":"2016-02-19T03:14:46.000Z","path":"2016/02/19/2016年计划/","text":"2016年计划 ： 2016年开始了，新年新气象。加油！ 新年新气象 自己规划总结2015年这一年，感觉浑浑噩噩，本来想多学一门语言，但后来还是没有进行到，那个谁说过，完事开头难我感觉能把一件事坚持下来更难，三分钟热度这事长有，贵在坚持，现在看来坚持一件事得多难。 新的征程开始了，除了想给自己买个kindle，但是还在由于，买kindle干嘛，说对了,第一件事就是看书，每月必须看一本书。规定一年12个月每月一本。每本都要写总结。 除了看书，还要把想学的语音过一遍，比如ruby and rails写一个我的首页 其实吧任务还是挺重的嗯。。。。。。。。 新的征程 刚开始读完了吴军的浪潮之巅第二版，整本书分为两版，第一版主要介绍各个美国公司的兴衰史；第二版主要介绍的变革，主要以互联网公司Google、Facebook等，以及一些风投公司的兴衰，公司上市等。 读后感： 每家成功的公司，都有着自己独立的位置， Google杀鸡焉用牛刀，如果毕业生能完成的，研究生也能完成，那就用研究生，也就是说研究生肯定比毕业生做的好； 一直像前看，不在旁边的风景，只要赶超对手一大截就是胜利，Google和微软 科技公司和互联网公司。","tags":[{"name":"Sentiment","slug":"Sentiment","permalink":"http://www.tiandabao.com/tags/Sentiment/"}]},{"title":"Hexo配置","date":"2016-02-04T03:02:35.000Z","path":"2016/02/04/Hexo配置/","text":"Hexo配置 ： 关于Hexo的一些配置，这是初来乍到的开始。 Hexo配置GitHub博客 好久都想搞一下博客这个东西，每次都弄了好长时间又放弃了，感觉对于写前端的我，真是麻烦，最近快过年了，最后一个版本也上线了，闲了一段时间，想起来Github上的博客还闲置着，终于有时间搞搞了。 网上已经有很多对于hexo的配置安装，我这里只是写我自己安装步骤和遇到的问题。 开始部署首先在Github上有hexo的源代码 这里是连接hexo 安装hexo 1npm install hexo-cli -g 通过终端cd 进入到自己的博客文件夹 1hexo init 会有如下文件在你的博客目录[~ tree -L 1 demodemo├── _config.yml├── package.json├── scaffolds├── source└── themes 3 directories, 2 files] 这样一个简单的博客初始化就完成了。不过还不能运行，下来我让它跑起来。 本地运行 现在用hexo generate生成静态文件，然后用hexo server运行本地服务器，打开浏览器输入http://0.0.0.0:4000/查看效果。如果发现有问题，在md文件改了之后，刷新页面就可以看到更改的效果了 配置 接下来我们要让代码运行到github上 _config.yml文件配置 主要是这一部分的设置，会影响到你在网页上的展示，如果你出现404页面，就是因为这里没有设置你自己的博客代码地址1234deploy: type: git #最新版3.X把这个github缩写成git了，记得空格. repository: \"https://github.com/tiandabao/tiandabao.github.io.git\" branch: master 然后提交到github上就行了 其实在这个过程中有好多坑，这里是我遇到的和解决办法 在运行hexo generate时候会出现如下代码 123&#123; [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125; 解决办法。1$ npm install hexo --no-optional 注意 这个地方运行上面的代码是要在自己博客的目录下，不然不能生效。 在运行hexo deploy时候有时候会提示如下1ERROR Deployer not found : git 解决方法在自己博客目录下运行1npm install hexo-deployer-git --save 在提交github的时候会出现类似于这样的代码123modified: .DS_Storemodified: .deploy_git (modified content, untracked content)modified: themes/yilia (modified content, untracked content) 这部分不用管，主题是从远端clone的， 主题设置可以看这篇博客yilia在设置主题的时候，有个头像问题，一直没解决，就是图片的地址，处理方法：我把图片放到public/images/avatar.jpg下，提交到github后我可以找到我图片的地址“https://github.com/tiandabao/tiandabao.github.io/blob/master/images/avatar.jpg“但是在主题里我设置了这个url显示不出来，后来我发现，在你要显示的图片网页上右键，复制图片网址，“https://github.com/tiandabao/tiandabao.github.io/blob/master/images/avatar.jpg?raw=true”这时图片的地址后面多了个?raw=true，这时候把这个地址赋值给你主题头像字段 1234error: Your local changes to the following files would be overwritten by merge: .DS_StorePlease, commit your changes or stash them before you can merge.Aborting 出现上面的问题，处理步骤删除本地.DS_Store，在进行pull或者push，由于.DS_Store文件存储有冲突，删掉会重新生成一分 每次提交到github前记得hexo g 和 hexo d， 不然也页面显示不出来 友情参考https://segmentfault.com/a/1190000002398039http://litten.github.io/2014/08/31/hexo-theme-yilia/http://www.jianshu.com/p/b7886271e21a","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.tiandabao.com/tags/Hexo/"}]},{"title":"我的第一篇博客","date":"2016-02-03T09:31:50.000Z","path":"2016/02/03/我的第一篇博客/","text":"初来乍到","tags":[]}]